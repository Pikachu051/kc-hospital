// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User{
  id Int @default(autoincrement())
  username String @id @unique @db.VarChar(255)
  password String @unique @db.VarChar(255)
  firstName String @db.VarChar(80)
  lastName String @db.VarChar(80)
  doctor_id Int @unique
  role UserRole @default(USER)

  loginHistory LoginHistory[]
  doctor Doctor @relation(fields: [doctor_id], references: [doctor_id])
}

model LoginHistory{
  username String @db.VarChar(255)
  loginDate DateTime @default(now()) @db.Date
  loginTime DateTime @default(now()) @db.Time(3)

  @@id([loginDate, loginTime])
  user User @relation(fields: [username], references: [username])
}

model Patientinfo{
  hnid Int @id @default(autoincrement())
  prefix String @db.VarChar(15)
  firstName String @db.VarChar(80)
  lastName String @db.VarChar(80)
  idcard String @db.VarChar(13)
  sex String @db.VarChar(1)
  dob DateTime @db.Date
  address String @db.VarChar(255)
  tel String @db.VarChar(10)
  workphone String @db.VarChar(10)
  phone String @db.VarChar(10)
  bloodType String @db.VarChar(3)
  medCondi String @db.VarChar(255)
  coverage_id Int

  mediCov MedicalCoverage @relation(fields: [coverage_id], references: [coverage_id])
  transferHistory TransferHistory[]
  admit Admit[]
  diag Diagnosis[]
}

model MedicalCoverage{
  coverage_id Int @id @default(autoincrement())
  coverage_name String @db.VarChar(255)
  coverage_manager String @db.VarChar(160)

  patientInfo Patientinfo[]
}

model Admit{
  doctor_id Int
  hnid Int @id
  admit_date DateTime @default(now()) @db.Date
  admit_time DateTime @default(now()) @db.Time(3)
  ward String @db.VarChar(1)
  room_id String @db.VarChar(3)
  dept_id String @db.VarChar(10)
  bed_id String @db.VarChar(7) @unique
  contact String @db.VarChar(160)
  symptom String @db.VarChar(255)

  doctor Doctor @relation(fields: [doctor_id], references: [doctor_id])
  bed Bed @relation(fields: [bed_id], references: [bed_id])
  dept Department @relation(fields: [dept_id], references: [dept_id])
  patient Patientinfo @relation(fields: [hnid], references: [hnid])
}

enum bed_status{
  VACANT
  BUSY
}

model TransferHistory{
  hnid Int
  doctor_id Int
  transfer_date DateTime @default(now()) @db.Date
  transfer_time DateTime @default(now()) @db.Time(3)
  oldBed_id String @db.VarChar(7) @unique
  newBed_id String @db.VarChar(7) @unique
  reason String @db.VarChar(255)

  @@id([hnid, transfer_date])
  doctor Doctor @relation(fields: [doctor_id], references: [doctor_id])
  oldBed Bed @relation("transferFrom", fields: [oldBed_id], references: [bed_id])
  newBed Bed @relation("transferTo", fields: [newBed_id], references: [bed_id])
  patient Patientinfo @relation(fields: [hnid], references: [hnid])
}

model Bed{
  bed_id String @id @db.VarChar(7)
  room_id String @db.VarChar(3)
  ward String @db.VarChar(1)
  bed_status bed_status @default(VACANT)

  admit Admit?
  transferNew TransferHistory[] @relation("transferTo")
  transferOld TransferHistory[] @relation("transferFrom")
}

model ICD10{
  icd_id String @id @db.VarChar(10)
  description String @db.VarChar(255)

  diagnosis Diagnosis[]
}

model Diagnosis{
  doctor_id Int
  hnid Int
  diag_date DateTime @default(now()) @db.Date
  icd_id String @db.VarChar(10)
  dxType String @db.VarChar(30)

  @@id([doctor_id, hnid, diag_date])
  icd ICD10 @relation(fields: [icd_id], references: [icd_id])
  patient Patientinfo @relation(fields: [hnid], references: [hnid])
}

model Doctor{
  doctor_id Int @id @default(autoincrement())
  firstName String @db.VarChar(80)
  lastName String @db.VarChar(80)
  dept_id String @db.VarChar(10)

  user User?
  transferHistory TransferHistory[]
  admit Admit[]
  dept Department @relation(fields: [dept_id], references: [dept_id])
}

model Department{
  dept_id String @id @db.VarChar(10)
  dept_name String @db.VarChar(100)

  admit Admit[]
  doctor Doctor[]
}


